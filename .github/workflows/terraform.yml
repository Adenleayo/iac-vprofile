name: "vprofile IAC"
on:
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**

env:
  # credentials for deployment to AWs
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1 
  BUCKET_TF_STATE:  ${{ secrets.BUCKET_TF_STATE }} 
  EKS_CLUSTER: vprofile-eks

jobs:
  terraform:
    name: "Apply terraform code changes"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: setup terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - name: terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: terraform fmt
        id: fmt
        run: terraform fmt -check 

      - name: terraform validate
        id: validate
        run: terraform validate

      - name: terraform plan
        id: plan
        run: terraform plan -no-color -input-false -out planfile
        continue-on-error: true

      # - name: terraform plan status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1
        
      - name: terraform apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile
        
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION}}

      - name: Get kube config file
        id: get-kubeconfig
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --region ${env.AWS_REGION} --name ${env.EKS_CLUSTER}

      - name: install ingress controller
        if: steps.get-kubeconfig.outcome == 'success' && steps.apply.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml

